"use strict";var e=require("typescript"),t=require("path"),r=require("fs"),o=require("perf_hooks");function n(e){var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,o.get?o:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var i=n(e);const s=e=>{const t=[{limit:1024,suffix:"bytes",divisor:1},{limit:1048576,suffix:"KB",divisor:1024},{limit:1073741824,suffix:"MB",divisor:1048576},{limit:1/0,suffix:"GB",divisor:1073741824}].find((t=>e<t.limit));return`${(e/t.divisor).toFixed(2)} ${t.suffix}`};module.exports=class{projectDir;program;constructor(t){this.projectDir=t,this.program=e.createProgram([`${t}/src/**/*.ts`],{})}analyze(){const t=process.hrtime(),r=this.program.getSourceFiles();let o=0,n=0;r.forEach((t=>{const r=t.getLineAndCharacterOfPosition(t.getEnd()).line+1;o+=r;const i=this.program.getTypeChecker();e.forEachChild(t,(e=>{i.getTypeAtLocation(e)&&n++}))}));const[i,s]=process.hrtime(t),c=1e3*i+s/1e6;return{totalFiles:r.length,totalLines:o,totalTypes:n,typeCheckingTime:c,suggestions:this.generateSuggestions(n,c)}}generateSuggestions(e,t){const r=[];return t>1e3&&r.push("⏰ Consider splitting large files to reduce type-checking time"),e>1e4&&r.push("🧹 Try to simplify complex types or reduce the number of types."),r}async functionPerformance(e,n,c){let u=0,a="";const l=t.join(e,n);if(!r.existsSync(l))throw new Error(`File ${n} does not exist`);r.readFile(l,((e,t)=>{if(0===t.length)throw new Error(`File ${n} is empty`,e)}));try{const e=r.readFileSync(l,"utf8").split("\n");try{const t=((e,t)=>{let r="",o=!1,n=0;for(const i of e)if((i.includes(`async function ${t}`)||i.includes(`const ${t} = async`)||i.includes(`const ${t} = `)||i.includes(`function ${t}`)||i.includes(`export const ${t}`)||i.includes(`export function ${t}`))&&(o=!0),o&&(r+=i+"\n",i.includes("{")&&n++,i.includes("}")&&n--,0===n)){o=!1;break}if(!r)throw new Error(`Function ${t} not found`);return r})(e,c),r=(e=>{const t=new Function(`\n        return function() {\n            ${e}\n        };\n    `)();if("function"!=typeof t)throw new Error("The code did not produce a valid function.");return t})((f=t,i.transpileModule(f,{compilerOptions:{module:i.ModuleKind.CommonJS,target:i.ScriptTarget.ES2015,esModuleInterop:!0}}).outputText));u=await(async e=>{console.log("Function passed to getTotalTimeScore:",e);const t=o.performance.now();let r=null;return"AsyncFunction"===e.constructor.name?e().then((()=>(r=o.performance.now(),r-t))):(e(),r=o.performance.now(),Promise.resolve(r-t))})(r),a=await(e=>{const t=o.performance.now(),r=process.memoryUsage().heapUsed;e();const n=process.memoryUsage().heapUsed,i=o.performance.now();return Promise.resolve(s(i-t+(n-r)))})(r)}catch(e){return console.log(e),Promise.reject(new Error("Error evaluating function",e))}return{totalTime:u,totalSpace:a}}catch(e){throw new Error(`Error in function performance analysis: ${e}`)}var f}};
